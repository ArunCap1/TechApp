Deleting docker images :
docker image rm -f  image
docker rm $(docker ps -aq)
http://blog.baudson.de/blog/stop-and-remove-all-docker-containers-and-images

# Delete every Docker containers
# Must be run first because images are attached to containers
docker rm -f $(docker ps -a -q)

# Delete every Docker image .. it will delete all the images 
docker rmi -f $(docker images -q)
to start exited docker containers
docker container start container_name
https://stackoverflow.com/questions/21928691/how-to-continue-a-docker-container-which-has-exited
docker start $(docker ps -a -q --filter "status=exited")


Groovy file transfer through camel application
https://github.com/sgoeschl/groovy-scripting

Groovy with sample application ::
https://dzone.com/articles/getting-started-apache-camel

Certificate with groovy
https://github.com/square/keywhiz/issues/101


Git command to checkout branch
git clone -b OAuth_Changes Test
Git clone -b Yml_changes_for-_local Test


-DoidcAuthorityUrl=http://localhost:3000 -DoidcClientId=test -DoidcClientSecret=test -DoidcAudience=telematics-api -DetlApiUrl=http://localhost:8912 -DdataApiUrl=http://localhost:9090 clean test


mvn -DforkCount=0 -DoidcAuthorityUrl=https://altec-customer-portal.auth0.com/oauth -DoidcClientId=Test -DoidcClientSecret=Test -DoidcAudience=telematics-api -DetlApiUrl=http://localhost:8080  clean test

Yq0qeLcEpd0B.ob&og#Ax2yb&@h
HADrEwYb2yLGYGutYM(@ncOls3m

OIDC_AUTHORITY_URL=test/oauth
OIDC_CLIENT_ID=Test
OIDC_CLIENT_SECRET=Test
OIDC_AUDIENCE=telematics-api
ETL_API_URL=test
DATA_API_URL=test


mvn 
-DoidcAuthorityUrl=test
-DoidcClientId=Test 
-DoidcClientSecret=Test 
-DoidcAudience=telematics-api 
-DetlApiUrl=http://localhost:8080
-DdataApiUrl=test
clean test


-DoidcAuthorityUrl=test/oauth -DoidcClientId=Test -DoidcClientSecret=Test -DoidcAudience=telematics-api -DetlApiUrl=test -DdataApiUrl=test


-ea -DoidcAuthorityUrl=test -DoidcClientId=Test -DoidcClientSecret=Test -DoidcAudience=telematics-api -DetlApiUrl=http://localhost:8080
-DdataApiUrl=test


-DoidcAuthorityUrl=http://localhost:3000/auth -DoidcClientId=dm-ui -DoidcClientSecret=secret -DoidcAudience=telematics-api -DetlApiUrl=http://localhost:8080
-DdataApiUrl=http://localhost:8088 clean test

curl http://localhost:3000/token -u dm-m2m:secret -d grant_type=client_credentials -d scope=etl-api%3Afile%3AuploadTest
curl http://localhost:3000/token -u dm-m2m:secret -d grant_type=client_credentials -d scope=etl-api%3Aload-test

curl -v -H "Authorization: Bearer Test.Test.u2K6d5flNzxNRb9-Test-wIIb9e2ZoeKX5TKkGGQGFLkpVZm-Test-g" -H "Content-Type: application/json" http://localhost:8088/metadata


-DoidcAuthorityUrl=http://localhost:3000/token -DoidcClientId=test -DoidcClientSecret=secret -DoidcAudience=telematics-api -DetlApiUrl=http://localhost:8080 -DdataApiUrl=http://localhost:8088 clean test


curl -u dm-m2m:secret -d 'grant_type=client_credentials&scope=dm-config-api%3Aread' http://localhost:3000/token


docker exec -it  dm-config-api_mysql_1 mysql -uroot -p


curl -u dm-m2m:secret -d ‘grant_type=client_credentials&scope=dm-config-api%3Awrite’ http://localhost:3000/token


-DoidcAuthorityUrl=http://localhost:3000/auth -DoidcClientId=dm-ui -DoidcClientSecret=secret -DoidcAudience=telematics-api -DetlApiUrl=http://localhost:8080 -DdataApiUrl=http://localhost:8088 clean test



static fetchAccessToken_ETLAPI(scope) {
    def http = new HTTPBuilder()
    def response = http.post(
            uri: "${OIDC_AUTHORITY_URL}/token",
            headers: [Authorization: "Basic ${encodedCredentials()}"],
            body: [
                    grant_type: 'client_credentials',
                    scope     : scope,
                    audience  : OIDC_AUDIENCE

            ],
            requestContentType: URLENC
    )
    return response.access_token
}
